//      MARK: -SECTION HEADERS - NO LONGER USED
extension IncidentTVC {
    /*override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let cell = tableView.dequeueReusableHeaderFooterView(withIdentifier: "NFIRSsectionHeaderTHFV")
        switch section {
        case 0:break
        case 1:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[1]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 2:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[2]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 3:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[3]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 4:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[4]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 5:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[5]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 6:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[6]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 7:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[7]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 8:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[8]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 9:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[9]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 10:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[10]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 11:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[11]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 12:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[12]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 13:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[13]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 14:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[14]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        case 15:
            let header = cell as! NFIRSsectionHeaderTHFV
            header.theSection = theSections[15]
            header.delegate = self
            if !header.collapsed {
                header.openCloseSwitch.setOn(true, animated: true)
            } else {
                header.openCloseSwitch.setOn(false, animated: true)
            }
            return cell
        default: break
        }
        return UIView()
    }
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        switch section {
        case 0:
            return 0
        case 1:
            return 115
        case 2:
            return 135
        case 3:
            return 115
        case 4:
            return 125
        case 5:
            return 145
        case 6:
            return 135
        case 7,11:
            return 115
        case 8:
            return 135
        case 9,10,12:
            return 115
        case 13,14,15:
            return 115
        default:
            return 0
        }
    }
     
     override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
     let data = theSections[section]
     
     if data.isCollapsed {
     return 0
     } else {
     return data.rowCount
     }
     }
     override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
     let section = indexPath.section
     let row = indexPath.row
     let data = theSections[section]
     switch section {
     case 0:
     switch row {
     case 0:
     return  105
     case 1:
     return 200
     case 2:
     if(showMap) {
     return 500
     } else {
     return 0
     }
     case 3:
     return 44
     case 4:
     return 84
     case 5:
     return 120
     case 6,7,8,9:
     return 84
     case 10:
     return 120
     case 11:
     return 81
     case 12:
     if(showPicker1) {
     return 215
     } else {
     return 0
     }
     case 13:
     if alarmNotes {
     return 110
     } else {
     return 0
     }
     case 14:
     return 50
     case 15:
     if(showPicker2) {
     return 215
     } else {
     return 0
     }
     case 16:
     if arrivalNotes {
     return 110
     } else {
     return 0
     }
     case 17:
     return 50
     case 18:
     if(showPicker3) {
     return 215
     } else {
     return 0
     }
     case 19:
     if controlledNotes {
     return 110
     } else {
     return 0
     }
     case 20:
     return 50
     case 21:
     if(showPicker4) {
     return 215
     } else {
     return 0
     }
     case 22:
     if lastUnitStandingNotes {
     return 110
     } else {
     return 0
     }
     case 23:
     return 120
     case 24:
     return 84
     case 25, 26, 27:
     return 81
     case 28:
     return 44
     case 29:
     return 120
     case 30:
     return 250
     default:
     return 0
     }
     case 1:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 81
     case 1:
     return 81
     case 2:
     return 80
     case 3:
     if(showPickerSec1) {
     return 215
     } else {
     return 0
     }
     case 4:
     return 65
     case 5:
     return 65
     case 6:
     return 84
     default:
     return 0
     }
     }
     case 2:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 65
     case 1:
     return 65
     case 2:
     return 65
     case 3:
     return 65
     case 4:
     return 65
     case 5,6,7,8,9,10,11,12:
     return 81
     default:
     return 0
     }
     }
     case 3:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 120
     default:
     return 0
     }
     }
     case 4:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0,2:
     return 81
     case 1,3:
     return 65
     default:
     return 0
     }
     }
     case 5:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 50
     case 1:
     return 36
     case 2:
     return 80
     case 3:
     if(showPickerSecEAlarm) {
     return 215
     } else {
     return 0
     }
     case 4:
     return 80
     case 5:
     if(showPickerSecEArrive) {
     return 215
     } else {
     return 0
     }
     case 6:
     return 80
     case 7:
     if(showPickerSecEControlled) {
     return 215
     } else {
     return 0
     }
     case 8:
     return 80
     case 9:
     if(showPickerSecELastUnit) {
     return 215
     } else {
     return 0
     }
     case 10:
     return 62
     case 11...13:
     return 65
     case 14:
     return 62
     case 15,16:
     return 65
     default:
     return 0
     }
     }
     case 6:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0,1,2:
     return 81
     default:
     return 0
     }
     }
     case 7:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 44
     case 1:
     if Device.IS_IPHONE {
     return 81
     } else {
     return 44
     }
     case 2:
     return 44
     case 3,4:
     return 65
     case 5:
     return 44
     case 6,7:
     return 65
     case 8:
     return 44
     case 9,10:
     return 65
     case 11:
     if Device.IS_IPHONE {
     return 81
     } else {
     return 44
     }
     case 12:
     if Device.IS_IPHONE {
     return 81
     } else {
     return 44
     }
     case 13:
     if Device.IS_IPHONE {
     return 81
     } else {
     return 44
     }
     case 14:
     return 44
     case 15,16:
     return 65
     case 17:
     return 44
     case 18,19:
     return 65
     default:
     return 0
     }
     }
     case 8:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0,1:
     return 44
     case 2,3:
     return 65
     case 4:
     return 44
     case 5,6:
     return 65
     case 7:
     return 44
     case 8:
     return 22
     case 9,10,11,12:
     return 44
     case 13:
     return 75
     default:
     return 0
     }
     }
     case 9:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 45
     case 1:
     return 75
     default:
     return 0
     }
     }
     case 10:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 44
     case 1,2,4:
     return 75
     case 3:
     return 60
     default:
     return 0
     }
     }
     case 11:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 44
     case 1:
     return 65
     case 2,3:
     return 65
     case 4:
     return 84
     case 5,6,7,8,9:
     return 65
     case 10:
     return 76
     case 11:
     return 65
     case 12,13:
     return 65
     case 14:
     return 76
     case 15,16:
     return 65
     case 17:
     return 76
     case 18:
     return 65
     case 19:
     return 30
     case 20:
     return 65
     case 21:
     return 65
     case 22,23:
     return 65
     case 24:
     return 84
     case 25,26,27,28:
     return 65
     case 30,32:
     return 65
     case 29,31,33,34,35,36,37:
     return 65
     default:
     return 0
     }
     }
     case 12:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 110
     case 1:
     return 65
     default:
     return 0
     }
     }
     case 13:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 65
     case 1:
     if theOfficerSignatureB {
     return 197
     } else {
     return 80
     }
     case 2:
     return 81
     case 3:
     return 75
     case 4:
     if showPickerSecMOfficer {
     return 215
     } else {
     return 0
     }
     case 5:
     return 81
     case 6:
     return 65
     case 7:
     return 65
     case 8:
     if theMemberMakingSignatureB {
     return 197
     } else {
     return 80
     }
     case 9:
     return 81
     case 10:
     return 75
     case 11:
     if showPickerSecMMember {
     return 215
     } else {
     return 0
     }
     case 12:
     return 81
     default:
     return 0
     }
     }
     case 14:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 44
     case 1:
     return 44
     case 2:
     return 44
     case 3:
     return 44
     case 4:
     return 44
     case 5:
     return 44
     case 6:
     return 44
     case 7:
     return 44
     case 8:
     return 44
     case 9:
     return 44
     default:
     return 0
     }
     }
     case 15:
     if data.isCollapsed {
     return 0
     } else {
     switch row {
     case 0:
     return 44
     case 1:
     return 44
     case 2:
     return 44
     case 3:
     return 44
     case 4:
     return 44
     case 5:
     return 44
     case 6:
     return 44
     case 7:
     return 44
     case 8:
     return 44
     case 9:
     return 44
     default:
     return 0
     }
     }
     default:
     return 0
     }
     }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let row = indexPath.row
        let section = indexPath.section
        let data = theSections[section]
        let theGroup:NFIRSModule = data.type
        switch theGroup {
        case .incident:
            switch row {
            case 0:
                let cell = tableView.dequeueReusableCell(withIdentifier: "ControllerLabelCell", for: indexPath) as! ControllerLabelCell
                if incidentStructure.incidentFullDateS != "" {
                    cell.dateL.text = incidentStructure.incidentFullDateS
                }
                if incidentStructure.incidentFullAddress != "" {
                    cell.addressL.text = incidentStructure.incidentFullAddress
                }
                if incidentStructure.incidentNumber != "" {
                    let number = incidentStructure.incidentNumber
                    cell.controllerL.text = "# "+number
                }
                var imageName = incidentStructure.incidentImageName
                if imageName == "flameRed58" {
                    imageName = "100515IconSet_092016_fireboard"
                } else if imageName == "ems58" {
                    imageName = "100515IconSet_092016_emsboard"
                } else if imageName == "rescue58" {
                    imageName = "100515IconSet_092016_rescueboard"
                }
                
                let image = UIImage(named: imageName)
                cell.typeIV.image = image
                return cell
            case 1:
                let cell = tableView.dequeueReusableCell(withIdentifier: "AddressFieldsButtonsCell", for: indexPath) as! AddressFieldsButtonsCell
                cell.subjectL.text = "Address"
                if incidentStructure.incidentStreetName == "" {
                    cell.addressTF.attributedPlaceholder = NSAttributedString(string: "100 Main Street",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                } else {
                    cell.addressTF.text = "\(incidentStructure.incidentStreetNum) \(incidentStructure.incidentStreetName)"
                }
                cell.addressTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                if incidentStructure.incidentCity == "" {
                    cell.cityTF.attributedPlaceholder = NSAttributedString(string: "Los Angeles",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                } else {
                    cell.cityTF.text = incidentStructure.incidentCity
                }
                cell.cityTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                if incidentStructure.incidentState == "" {
                    cell.stateTF.attributedPlaceholder = NSAttributedString(string: "CA",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                } else {
                    cell.stateTF.text = incidentStructure.incidentState
                }
                cell.stateTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                if incidentStructure.incidentZip == "" {
                    cell.zipTF.attributedPlaceholder = NSAttributedString(string: "90001",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                } else {
                    cell.zipTF.text = incidentStructure.incidentZip
                }
                cell.zipTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                cell.delegate = self
                return cell
            case 2:
                //                let cell = tableView.dequeueReusableCell(withIdentifier: "startShiftOvertimeSwitchCell", for: indexPath) as! startShiftOvertimeSwitchCell
                //                return cell
                let cell = tableView.dequeueReusableCell(withIdentifier: "MapViewCell", for: indexPath) as! MapViewCell
                cell.delegate = self
                cell.incidentType = incidentStructure.incidentType
                if(showMap) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 500)
                    )
                    cell.contentView.frame = frame
                    cell.contentView.layer.zPosition = CGFloat(Float.greatestFiniteMagnitude)
                    cell.mapShow = true
                    cell.useAddressB.isHidden = false
                    cell.useAddressB.alpha = 1.0
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.contentView.frame = frame
                    cell.contentView.layer.zPosition = CGFloat(Float.greatestFiniteMagnitude)
                    cell.mapShow = false
                    cell.useAddressB.isHidden = true
                    cell.useAddressB.alpha = 0.0
                }
                return cell
            case 3:
                let cell = tableView.dequeueReusableCell(withIdentifier: "startShiftOvertimeSwitchCell", for: indexPath) as! startShiftOvertimeSwitchCell
                cell.delegate = self
                cell.amOrOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                cell.amOrOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                cell.amOrOvertimeSwitch.layer.cornerRadius = 16
                cell.startOrEndB = incidentStructure.incidentEmergencyYesNo
                cell.myShift = myShift
                cell.amOrOvertimeL.text = incidentStructure.incidentEmergency
                cell.amOrOvertimeL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                return cell
            case 4:
                let cell = tableView.dequeueReusableCell(withIdentifier: "SegmentCell", for: indexPath) as! SegmentCell
                cell.delegate = self
                cell.subjectL.text = "Incident Type"
                cell.myShift = .incidents
                cell.typeSegment.setTitle("Fire", forSegmentAt: 0)
                cell.typeSegment.setTitle("EMS", forSegmentAt: 1)
                cell.typeSegment.setTitle("Rescue", forSegmentAt: 2)
                switch segmentType {
                case .fire:
                    cell.typeSegment.selectedSegmentIndex = 0
                case .ems:
                    cell.typeSegment.selectedSegmentIndex = 1
                case .rescue:
                    cell.typeSegment.selectedSegmentIndex = 2
                default:
                    cell.typeSegment.selectedSegmentIndex = 0
                }
                return cell
            case 5:
                let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentShortTVWithDirectionalCell", for: indexPath) as! IncidentShortTVWithDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "NFIRS Incident Type"
                cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentNfirsIncidentType != "" {
                    cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    let type = incidentStructure.incidentNfirsIncidentType
                    let number = incidentStructure.incidentNfirsIncidentTypeNumber
                    cell.descriptionTV.text = number+" "+type
                } else {
                    cell.descriptionTV.textColor =  UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)
                    cell.descriptionTV.text = "121 Fire in mobile home used as a fixed residence. Includes mobile homes when not in transit and used as a structure for residential purposes; and manufactured homes built on a permanent chassis."
                }
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                cell.myShift = .incidents
                cell.incidentType = .nfirsIncidentType
                return cell
            case 6:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                cell.delegate = self
                cell.subjectL.text = "Local Incident Type"
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentLocalType != "" {
                    cell.descriptionTF.text = incidentStructure.incidentLocalType
                } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Structure Fire",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                }
                cell.incidenttype = .localIncidentType
                cell.myShift = myShift
                let image = UIImage(named: "ICONS_Directional red")
                cell.moreB.setImage(image, for: .normal)
                return cell
            case 7:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                cell.delegate = self
                cell.subjectL.text = "Location Type"
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentLocationType != "" {
                    cell.descriptionTF.text = incidentStructure.incidentLocationType
                } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "In Front Of",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                }
                cell.incidenttype = .locationType
                cell.myShift = myShift
                let image = UIImage(named: "ICONS_Directional red")
                cell.moreB.setImage(image, for: .normal)
                return cell
            case 8:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                cell.delegate = self
                cell.subjectL.text = "Street Type"
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentStreetType != nil {
                    cell.descriptionTF.text = incidentStructure.incidentStreetType
                } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Structure Fire",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                }
                cell.incidenttype = .streetType
                cell.myShift = myShift
                let image = UIImage(named: "ICONS_Directional red")
                cell.moreB.setImage(image, for: .normal)
                return cell
            case 9:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                cell.delegate = self
                cell.subjectL.text = "Street Prefix"
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentStreetPrefix != nil {
                    cell.descriptionTF.text = incidentStructure.incidentStreetPrefix
                } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Structure Fire",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                }
                cell.incidenttype = .streetPrefix
                cell.myShift = myShift
                let image = UIImage(named: "ICONS_Directional red")
                cell.moreB.setImage(image, for: .normal)
                return cell
            case 10:
                let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentNotesTextViewCell", for: indexPath) as! IncidentNotesTextViewCell
                cell.subjectL.text = "Incident Notes"
                cell.delegate = self
                cell.myShift = myShift
                cell.incidentType = .incidentNote
                incidentNotesYesNo = true
                cell.descriptionTV.text = incidentStructure.incidentNotes
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                return cell
            case 11:
                let cell = tableView.dequeueReusableCell(withIdentifier: "TimeAndDateArrivalCell", for: indexPath) as! TimeAndDateArrivalCell
                cell.delegate = self
                cell.incidentType = .alarm
                cell.timeDateTF.text = incidentStructure.incidentFullAlarmDateS
                cell.timeDateTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                return cell
            case 12:
                let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                cell.delegate2 = self
                cell.incidentType = .alarm
                if(showPicker1) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 216)
                    )
                    cell.dateHolderV.frame = frame
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.dateHolderV.frame = frame
                }
                return cell
            case 13:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextViewCell", for: indexPath) as! LabelTextViewCell
                cell.subjectL.text = "Alarm Notes"
                cell.delegate = self
                cell.myShift = myShift
                cell.incidentType = .alarmNote
                cell.descriptionTV.text = incidentStructure.incidentAlarmNotes
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if(alarmNotes) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 110)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = false
                    cell.subjectL.alpha  = 1.0
                    cell.descriptionTV.isHidden = false
                    cell.descriptionTV.alpha = 1.0
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = true
                    cell.subjectL.alpha  = 0.0
                    cell.descriptionTV.isHidden = true
                    cell.descriptionTV.alpha = 0.0
                }
                return cell
            case 14:
                let cell = tableView.dequeueReusableCell(withIdentifier: "TimeAndDateIncidentCell", for: indexPath) as! TimeAndDateIncidentCell
                cell.delegate = self
                cell.incidentType = .arrival
                cell.subjectL.text = "Arrival"
                cell.timeAndDateTF.text = incidentStructure.incidentFullArrivalDateS
                cell.timeAndDateTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                return cell
            case 15:
                let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                cell.delegate2 = self
                cell.incidentType = .arrival
                if(showPicker2) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 216)
                    )
                    cell.dateHolderV.frame = frame
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.dateHolderV.frame = frame
                }
                return cell
            case 16:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextViewCell", for: indexPath) as! LabelTextViewCell
                cell.subjectL.text = "Arrival Notes"
                cell.delegate = self
                cell.myShift = myShift
                cell.incidentType = .arrivalNote
                cell.descriptionTV.text = incidentStructure.incidentArrivalNotes
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if(arrivalNotes) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 110)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = false
                    cell.subjectL.alpha  = 1.0
                    cell.descriptionTV.isHidden = false
                    cell.descriptionTV.alpha = 1.0
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = true
                    cell.subjectL.alpha  = 0.0
                    cell.descriptionTV.isHidden = true
                    cell.descriptionTV.alpha = 0.0
                }
                return cell
            case 17:
                let cell = tableView.dequeueReusableCell(withIdentifier: "TimeAndDateIncidentCell", for: indexPath) as! TimeAndDateIncidentCell
                cell.delegate = self
                cell.incidentType = .controlled
                cell.subjectL.text = "Controlled"
                cell.timeAndDateTF.text = incidentStructure.incidentFullControlledDateS
                cell.timeAndDateTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                return cell
            case 18:
                let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                cell.delegate2 = self
                cell.incidentType = .controlled
                if(showPicker3) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 216)
                    )
                    cell.dateHolderV.frame = frame
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.dateHolderV.frame = frame
                }
                return cell
            case 19:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextViewCell", for: indexPath) as! LabelTextViewCell
                cell.subjectL.text = "Controlled Notes"
                cell.delegate = self
                cell.myShift = myShift
                cell.incidentType = .controlledNote
                cell.descriptionTV.text = incidentStructure.incidentControlledNotes
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if(controlledNotes) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 110)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = false
                    cell.subjectL.alpha  = 1.0
                    cell.descriptionTV.isHidden = false
                    cell.descriptionTV.alpha = 1.0
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = true
                    cell.subjectL.alpha  = 0.0
                    cell.descriptionTV.isHidden = true
                    cell.descriptionTV.alpha = 0.0
                }
                return cell
            case 20:
                let cell = tableView.dequeueReusableCell(withIdentifier: "TimeAndDateIncidentCell", for: indexPath) as! TimeAndDateIncidentCell
                cell.delegate = self
                cell.incidentType = .lastunitstanding
                cell.subjectL.text = "Last Unit Standing"
                cell.timeAndDateTF.text = incidentStructure.incidentFullLastUnitDateS
                cell.timeAndDateTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                return cell
            case 21:
                let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                cell.delegate2  = self
                cell.incidentType = .lastunitstanding
                if(showPicker4) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 216)
                    )
                    cell.dateHolderV.frame = frame
                    cell.contentView.layer.zPosition = CGFloat(Float.greatestFiniteMagnitude)
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.dateHolderV.frame = frame
                    cell.contentView.layer.zPosition = CGFloat(Float.greatestFiniteMagnitude)
                }
                return cell
            case 22:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextViewCell", for: indexPath) as! LabelTextViewCell
                cell.subjectL.text = "Last Unit Standing Notes"
                cell.delegate = self
                cell.myShift = myShift
                cell.incidentType = .lastUnitStandingNote
                cell.descriptionTV.text = incidentStructure.incidentLastUnitNotes
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if(lastUnitStandingNotes) {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 110)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = false
                    cell.subjectL.alpha  = 1.0
                    cell.descriptionTV.isHidden = false
                    cell.descriptionTV.alpha = 1.0
                } else {
                    let frame = CGRect(
                        origin: CGPoint(x: 0, y: 0),
                        size: CGSize(width: tableView.frame.size.width, height: 0)
                    )
                    cell.contentView.frame = frame
                    cell.subjectL.isHidden = true
                    cell.subjectL.alpha  = 0.0
                    cell.descriptionTV.isHidden = true
                    cell.descriptionTV.alpha = 0.0
                }
                return cell
            case 23:
                let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentShortTVWithDirectionalCell", for: indexPath) as! IncidentShortTVWithDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "Crew"
                cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                cell.descriptionTV.text = ""
                if (incidentStructure.incidentCrewCombine != "")
                {
                    cell.descriptionTV.text = incidentStructure.incidentCrewCombine
                }
                cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                cell.myShift = .incidents
                cell.incidentType = .crew
                return cell
            case 24:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                cell.delegate = self
                cell.subjectL.text = "Resources"
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentResourcesCombined != "" {
                    cell.descriptionTF.text = incidentStructure.incidentResourcesCombined
                }
                cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                cell.incidenttype = .resources
                cell.myShift = myShift
                let image = UIImage(named: "ICONS_Directional red")
                cell.moreB.setImage(image, for: .normal)
                return cell
            case 25:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "Actions Taken 1"
                cell.incidentType = .firstAction
                cell.myShift = myShift
                cell.firstDescriptionTF.text = ""
                cell.secondDescriptionTF.text = ""
                cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction1No != "" {
                    cell.firstDescriptionTF.text = incidentStructure.incidentAction1No
                }
                cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction1S != "" {
                    cell.secondDescriptionTF.text = incidentStructure.incidentAction1S
                }
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                return cell
            case 26:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "Actions Taken 2"
                cell.incidentType = .secondAction
                cell.myShift = myShift
                cell.firstDescriptionTF.text = ""
                cell.secondDescriptionTF.text = ""
                cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction2No != "" {
                    cell.firstDescriptionTF.text = incidentStructure.incidentAction2No
                }
                cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction2S != "" {
                    cell.secondDescriptionTF.text = incidentStructure.incidentAction2S
                }
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                return cell
            case 27:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "Actions Taken 3"
                cell.incidentType = .thirdAction
                cell.myShift = myShift
                cell.firstDescriptionTF.text = ""
                cell.secondDescriptionTF.text = ""
                cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction3No != "" {
                    cell.firstDescriptionTF.text = incidentStructure.incidentAction3No
                }
                cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                if incidentStructure.incidentAction3S != "" {
                    cell.secondDescriptionTF.text = incidentStructure.incidentAction3S
                }
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                return cell
            case 28:
                let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                cell.delegate = self
                cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                cell.yesNotSwitch.layer.cornerRadius = 16
                cell.yesNotSwitch.isOn = incidentStructure.incidentArson
                cell.yesNoB = yesNo
                cell.myShift = myShift
                cell.incidentType = .arson
                cell.subjectL.text = "Arson Investigation"
                cell.leftText = "No"
                cell.rightText = "Yes"
                cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                return cell
            case 29:
                let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentShortTVWithDirectionalCell", for: indexPath) as! IncidentShortTVWithDirectionalCell
                cell.delegate = self
                cell.subjectL.text = "Tags"
                cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                cell.descriptionTV.text = ""
                if incidentStructure.incidentTags != "" {
                    cell.descriptionTV.text = incidentStructure.incidentTags
                }
                let image = UIImage(named: "ICONS_Directional red")
                cell.directionalB.setImage(image, for: .normal)
                cell.myShift = .incidents
                cell.incidentType = .tags
                return cell
            case 30:
                let cell = tableView.dequeueReusableCell(withIdentifier: "PhotosTVCell", for: indexPath) as! PhotosTVCell
                cell.delegate = self
                cell.subjectL.text = "Incident Photos"
                cell.myShift = myShift
                return cell
            default:
                let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
                return cell
            }
            /*case .modA:
             if data.isCollapsed {
             return UITableViewCell()
             } else {
             switch row {
             case 0:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
             //                    cell.delegate = self
             //                    cell.subjectL.text = "FDID"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentNFIRSSec1FDID != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSec1FDID
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "19105",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidenttype = .fdid
             //                    cell.myShift = myShift
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.moreB.setImage(image, for: .normal)
             return cell
             case 1:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
             //                    cell.delegate = self
             //                    cell.subjectL.text = "State"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentNFIRSSec1State != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSec1State
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "California",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidenttype = .state
             //                    cell.myShift = myShift
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.moreB.setImage(image, for: .normal)
             return cell
             case 2:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDateTimeButtonCell", for: indexPath) as! LabelDateTimeButtonCell
             //                    cell.delegate = self
             //                    cell.dateTimeTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFullAlarmDateS != "" {
             //                        cell.dateTimeTV.text = incidentStructure.incidentFullAlarmDateS
             //                    } else {
             //                        let date = Date()
             //                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.alarm, date: date)
             //                        cell.dateTimeTV.text = dateS
             //                    }
             //                    cell.dateTimeL.text = "Date/Time"
             //                    let image = UIImage(named: "ICONS_TimePiece red")
             //                    cell.dateTimeB.setImage(image, for: .normal)
             return cell
             case 3:
             let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
             //                    let incidentType:IncidentTypes = .alarm
             //                    cell.delegate2 = self
             //                    cell.incidentType = incidentType
             //                    if(showPickerSec1) {
             //                        let frame = CGRect(
             //                            origin: CGPoint(x: 0, y: 0),
             //                            size: CGSize(width: tableView.frame.size.width, height: 216)
             //                        )
             //                        cell.dateHolderV.frame = frame
             //                    } else {
             //                        let frame = CGRect(
             //                            origin: CGPoint(x: 0, y: 0),
             //                            size: CGSize(width: tableView.frame.size.width, height: 0)
             //                        )
             //                        cell.dateHolderV.frame = frame
             //                    }
             return cell
             case 4:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "Station"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "01",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 5:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "Incident Number"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentNumber != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentNumber
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "01",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 6:
             let cell = tableView.dequeueReusableCell(withIdentifier: "SegmentCell", for: indexPath) as! SegmentCell
             //                    cell.delegate = self
             //                    cell.subjectL.text = "Exposure"
             //                    cell.myShift = .incidentExposure
             //                    cell.typeSegment.setTitle("Delete", forSegmentAt: 0)
             //                    cell.typeSegment.setTitle("Change", forSegmentAt: 1)
             //                    cell.typeSegment.setTitle("No Activity", forSegmentAt: 2)
             //
             //                    if incidentStructure.incidentNFIRSSec1Exposure == "" {
             //                        incidentStructure.incidentNFIRSSec1Exposure = "No Activity"
             //                    }
             //
             //                    switch segmentType {
             //                    case .delete:
             //                        cell.typeSegment.selectedSegmentIndex = 0
             //                    case .change:
             //                        cell.typeSegment.selectedSegmentIndex = 1
             //                    case .noactivity:
             //                        cell.typeSegment.selectedSegmentIndex = 2
             //                    default:
             //                        cell.typeSegment.selectedSegmentIndex = 2
             //                    }
             return cell
             default:
             return UITableViewCell()
             }
             }
             case .modB:
             if data.isCollapsed {
             return UITableViewCell()
             } else {
             switch row {
             case 0:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "Number/MilePost"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "100",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 1:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "Street or Highway"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Main",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 2:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "City"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Los Angeles",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 3:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "State"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "CA",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 4:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
             //                    cell.delegate = self
             //                    cell.myShift = myShift
             //                    cell.subjectL.text = "Zip"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentFireStation != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentFireStation
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "90012-9999",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             return cell
             case 5:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
             //                    cell.delegate = self
             //                    cell.subjectL.text = "Location Type"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Street Address",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidenttype = .fdid
             //                    cell.myShift = myShift
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.moreB.setImage(image, for: .normal)
             return cell
             case 6:
             let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
             //                    cell.delegate = self
             //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
             //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
             //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
             //                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentArson
             //                    cell.subjectL.text = "Prefix"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidentType = .fdid
             //                    cell.myShift = myShift
             //                    cell.defaultOvertimeL.text = "NA"
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.directionalB.setImage(image, for: .normal)
             return cell
             case 7:
             let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
             //                    cell.delegate = self
             //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
             //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
             //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
             //                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentArson
             //                    cell.subjectL.text = "Suffix"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidentType = .fdid
             //                    cell.myShift = myShift
             //                    cell.defaultOvertimeL.text = "NA"
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.directionalB.setImage(image, for: .normal)
             return cell
             case 8:
             let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
             //                    cell.delegate = self
             //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
             //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
             //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
             //                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentArson
             //                    cell.subjectL.text = "Apt/Suite/Room"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "8-C",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidentType = .fdid
             //                    cell.myShift = myShift
             //                    cell.defaultOvertimeL.text = "NA"
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.directionalB.setImage(image, for: .normal)
             return cell
             case 9:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
             //                    cell.delegate = self
             //                    cell.subjectL.text = "Street Type"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "BLVD",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidenttype = .fdid
             //                    cell.myShift = myShift
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.moreB.setImage(image, for: .normal)
             return cell
             case 10:
             let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
             //                    cell.delegate = self
             //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
             //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
             //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
             //                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentArson
             //                    cell.subjectL.text = "Cross Street or Directions"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "9th Ave",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidentType = .fdid
             //                    cell.myShift = myShift
             //                    cell.defaultOvertimeL.text = "NA"
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.directionalB.setImage(image, for: .normal)
             return cell
             case 11:
             let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
             //                    cell.delegate = self
             //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
             //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
             //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
             //                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentArson
             //                    cell.subjectL.text = "Census Tract"
             //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             //                    if incidentStructure.incidentLocationType != "" {
             //                        cell.descriptionTF.text = incidentStructure.incidentLocationType
             //                    } else {
             //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "1066-11",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
             //                    }
             //                    cell.incidentType = .fdid
             //                    cell.myShift = myShift
             //                    cell.defaultOvertimeL.text = "NA"
             //                    let image = UIImage(named: "ICONS_Directional red")
             //                    cell.directionalB.setImage(image, for: .normal)
             return cell
             default:
             return UITableViewCell()
             }
             }*/
        case .modC:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentShortTVWithDirectionalCell", for: indexPath) as! IncidentShortTVWithDirectionalCell
                    cell.delegate = self
                    cell.subjectL.text = "NFIRS Incident Type"
                    cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNfirsIncidentType != "" {
                        cell.descriptionTV.textColor =  UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                        let type = incidentStructure.incidentNfirsIncidentType
                        let number = incidentStructure.incidentNfirsIncidentTypeNumber
                        cell.descriptionTV.text = number+" "+type
                    } else {
                        cell.descriptionTV.textColor =  UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)
                        cell.descriptionTV.text = "121 Fire in mobile home used as a fixed residence. Includes mobile homes when not in transit and used as a structure for residential purposes; and manufactured homes built on a permanent chassis."
                    }
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    cell.myShift = .incidents
                    cell.incidentType = .nfirsIncidentType
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modD:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    //                    cell.delegate = self
                    //                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    //                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    //                    let aidGiven = incidentStructure.incidentNFIRSSecDAidGivenB
                    //                    cell.defaultOvertimeSwitch.setOn(aidGiven, animated: false)
                    //                    cell.subjectL.text = "Aid Given or Recieved"
                    //                      cell.descriptionTF.text = ""
                    //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecDAidGivenS != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecDAidGivenS
                    //                    } else {
                    //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Mutual Aid",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    //                    cell.incidentType = .fdid
                    //                    cell.myShift = myShift
                    //                    cell.defaultOvertimeL.text = "NONE"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    //                    cell.delegate = self
                    //                    cell.myShift = myShift
                    //                    cell.subjectL.text = "Their FDID"
                    //                    cell.descriptionTF.text = ""
                    //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecDThierFDID != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecDThierFDID
                    //                    } else {
                    //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "90012",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Their State"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    cell.descriptionTF.text = ""
                    if incidentStructure.incidentNFIRSSecDTheirState != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecDTheirState
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "NV",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidenttype = .state
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    //                    cell.delegate = self
                    //                    cell.myShift = myShift
                    //                    cell.subjectL.text = "Their Incident Number"
                    //                    cell.descriptionTF.text = ""
                    //                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incdientNFIRSSecDThierIncidentNumber != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incdientNFIRSSecDThierIncidentNumber
                    //                    } else {
                    //                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "12",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modE1:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSDateTimeInstructCell", for: indexPath) as! NFIRSDateTimeInstructCell
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    cell.modalTitleL.text = "Dates/Times"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDateTimeButtonCell", for: indexPath) as! LabelDateTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsAlarm
                    cell.dateTimeTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentFullAlarmDateS != "" {
                    //                        cell.dateTimeTV.text = incidentStructure.incidentFullAlarmDateS
                    //                    } else {
                    //                        let date = Date()
                    //                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.alarm,date:date)
                    //                        cell.dateTimeTV.text = dateS
                    //                    }
                    cell.dateTimeL.text = "Alarm Time"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    //                    let incidentType:IncidentTypes = .alarm
                    //                    cell.delegate2 = self
                    //                    cell.incidentType = incidentType
                    //                    if(showPickerSecEAlarm) {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 216)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    } else {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 0)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    }
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSLabelDateTimeButtonCell", for: indexPath) as! NFIRSLabelDateTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsArrival
                    cell.dateTimeTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentFullArrivalDateS != "" {
                    //                        cell.dateTimeTF.text = incidentStructure.incidentFullArrivalDateS
                    //                    } else {
                    //                        let date = Date()
                    //                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.arrival,date:date)
                    //                        cell.dateTimeTF.text = dateS
                    //                    }
                    cell.dateTimeL.text = "Arrival Time"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    //                    let incidentType:IncidentTypes = .alarm
                    //                    cell.delegate2 = self
                    //                    cell.incidentType = incidentType
                    //                    if(showPickerSecEArrive) {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 216)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    } else {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 0)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    }
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSLabelDateTimeButtonCell", for: indexPath) as! NFIRSLabelDateTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsControlled
                    cell.dateTimeTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentFullControlledDateS != "" {
                    //                        cell.dateTimeTF.text = incidentStructure.incidentFullControlledDateS
                    //                    } else {
                    //                        let date = Date()
                    //                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.controlled,date:date)
                    //                        cell.dateTimeTF.text = dateS
                    //                    }
                    cell.dateTimeL.text = "Controlled"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    //                    let incidentType:IncidentTypes = .alarm
                    //                    cell.delegate2 = self
                    //                    cell.incidentType = incidentType
                    //                    if(showPickerSecEControlled) {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 216)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    } else {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 0)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    }
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSLabelDateTimeButtonCell", for: indexPath) as! NFIRSLabelDateTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsLastUnit
                    cell.dateTimeTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentFullAlarmDateS != "" {
                    //                        cell.dateTimeTF.text = incidentStructure.incidentFullAlarmDateS
                    //                    } else {
                    //                        let date = Date()
                    //                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.lastunitstanding,date: date)
                    //                        cell.dateTimeTF.text = dateS
                    //                    }
                    cell.dateTimeL.text = "Last Unit Standing"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    //                    let incidentType:IncidentTypes = .alarm
                    //                    cell.delegate2 = self
                    //                    cell.incidentType = incidentType
                    //                    if(showPickerSecELastUnit) {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 216)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    } else {
                    //                        let frame = CGRect(
                    //                            origin: CGPoint(x: 0, y: 0),
                    //                            size: CGSize(width: tableView.frame.size.width, height: 0)
                    //                        )
                    //                        cell.dateHolderV.frame = frame
                    //                    }
                    return cell
                case 10:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Shifts and Alarms (Local Option)"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    return cell
                case 11:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Shift or Platoon"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecEShiftOrPlatoon != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecEShiftOrPlatoon
                    //                    } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "c",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                case 12:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Alarms"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecEAlarms != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecEAlarms
                    //                    } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "3",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                case 13:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "District"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecEDistrict != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecEDistrict
                    //                    } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                case 14:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Special Studies (Local Option)"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    return cell
                case 15:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Special Studies #"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    //                    if incidentStructure.incidentNFIRSSecESpecialValue1 != "" {
                    //                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecESpecialValue1
                    //                    } else {
                    cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    //                    }
                    return cell
                case 16:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Special Studies Value"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecESpecialValue2 != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecESpecialValue2
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                default:
                    return UITableViewCell()
                }
            }
            /* case .modF:
             if data.isCollapsed {
             return UITableViewCell()
             } else {
             switch row {
             case 0:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
             cell.delegate = self
             cell.subjectL.text = "Primary Action Taken (1)"
             cell.incidentType = .firstAction
             cell.myShift = myShift
             cell.firstDescriptionTF.text = ""
             cell.secondDescriptionTF.text = ""
             cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             if incidentStructure.incidentAction1No != "" {
             cell.firstDescriptionTF.text = incidentStructure.incidentAction1No
             }
             cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             if incidentStructure.incidentAction1S != "" {
             cell.secondDescriptionTF.text = incidentStructure.incidentAction1S
             }
             let image = UIImage(named: "ICONS_Directional red")
             cell.directionalB.setImage(image, for: .normal)
             return cell
             case 1:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
             cell.delegate = self
             cell.subjectL.text = "Additional Action Taken (2)"
             cell.incidentType = .secondAction
             cell.myShift = myShift
             cell.firstDescriptionTF.text = ""
             cell.secondDescriptionTF.text = ""
             cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             if incidentStructure.incidentAction2No != "" {
             cell.firstDescriptionTF.text = incidentStructure.incidentAction2No
             }
             cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             if incidentStructure.incidentAction2S != "" {
             cell.secondDescriptionTF.text = incidentStructure.incidentAction2S
             }
             let image = UIImage(named: "ICONS_Directional red")
             cell.directionalB.setImage(image, for: .normal)
             return cell
             case 2:
             let cell = tableView.dequeueReusableCell(withIdentifier: "LabelDoubleTextFieldDirectionalCell", for: indexPath) as! LabelDoubleTextFieldDirectionalCell
             cell.delegate = self
             cell.subjectL.text = "Additional Action Taken (3)"
             cell.incidentType = .thirdAction
             cell.myShift = myShift
             cell.firstDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             cell.firstDescriptionTF.text = ""
             cell.secondDescriptionTF.text = ""
             if incidentStructure.incidentAction3No != "" {
             cell.firstDescriptionTF.text = incidentStructure.incidentAction3No
             }
             cell.secondDescriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
             if incidentStructure.incidentAction3S != "" {
             cell.secondDescriptionTF.text = incidentStructure.incidentAction3S
             }
             let image = UIImage(named: "ICONS_Directional red")
             cell.directionalB.setImage(image, for: .normal)
             return cell
             default:
             return UITableViewCell()
             }
             }*/
        case .modG1:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Resources"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(18.0)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = instructionOnOff
                    cell.type = .nfirsSecGInstruction1
                    if instructionOnOff {
                        cell.onOffL.text = "Yes"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Suppression"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(18.0)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Apparatus"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGSuppressionApparatus != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGSuppressionApparatus
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "1",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Personnel"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGSuppressionPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGSuppressionPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "EMS"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(18.0)
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Apparatus"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGEMSApparatus != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGEMSApparatus
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "1",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Personnel"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGEMSPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGEMSPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Other"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(18.0)
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Apparatus"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherApparatus != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherApparatus
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "1",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 10:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Personnel"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 11:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = instruction2OnOff
                    if instruction2OnOff {
                        cell.onOffL.text = "YES"
                    } else {
                        cell.onOffL.text = "NO"
                    }
                    cell.type = .nfirsSecGInstruction2
                    cell.instructionL.text = "Switch this ON if resource counts include aid received resources"
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 12:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Estimated dollar losses and values"
                    cell.modalTitleL.numberOfLines = 2
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(22.0)
                    return cell
                case 13:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = instruction3OnOff
                    if instruction3OnOff {
                        cell.onOffL.text = "YES"
                    } else {
                        cell.onOffL.text = "NONE"
                    }
                    cell.type = .nfirsSecGInstruction3
                    cell.instructionL.text = "Required for all fires if known optional for non-fires"
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 14:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Losses"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(22.0)
                    return cell
                case 15:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Property $"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 16:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Contents $"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "8,000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 17:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Pre-incident value (optional)"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    //                    cell.modalTitleL.font.withSize(22.0)
                    return cell
                case 18:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Property $"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 19:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Contents $"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecGOtherPersonnel != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecGOtherPersonnel
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "8,000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modH1:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecHCasualties
                    cell.yesNoB = incidentStructure.incidentNFIRSSecHCasualties
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecHCasualties
                    cell.subjectL.text = "Casualties"
                    cell.leftL.text = "None"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Fire Service"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Death"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecHFSDeath != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecHFSDeath
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Injuries"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecHFSInjuries != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecHFSInjuries
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "8,000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Civilian"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Death"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecHCDeath != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecHCDeath
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "2000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Injuries"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecHCInjuries != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecHCInjuries
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "8,000",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Detector"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Required for confined fires"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 18.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecHDAlerted
                    cell.yesNoB = incidentStructure.incidentNFIRSSecHDAlerted
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecHDAlerted
                    cell.subjectL.text = "Detector alerted occupants"
                    cell.leftL.text = "No"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 10:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecHDNotAlerted
                    cell.yesNoB = incidentStructure.incidentNFIRSSecHDNotAlerted
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecHDNotAlerted
                    cell.subjectL.text = "Detector did not alert them"
                    cell.leftL.text = "No"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 11:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecHDUnknown
                    cell.yesNoB = incidentStructure.incidentNFIRSSecHDUnknown
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecHDUnknown
                    cell.subjectL.text = "Unknown"
                    cell.leftL.text = "No"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 12:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecHHazardRelease
                    cell.yesNoB = incidentStructure.incidentNFIRSSecHHazardRelease
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecHHRelease
                    cell.subjectL.text = "Hazardous material released"
                    cell.leftL.text = "No"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 13:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Type"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecHHazardType != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecHHazardType
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Paint",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .nfirsSecHHType
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modI:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecIMixedUseProperty
                    cell.yesNoB = incidentStructure.incidentNFIRSSecIMixedUseProperty
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecIMixedUse
                    cell.subjectL.text = "Mixed use property"
                    cell.leftL.text = "Not mixed"
                    cell.rightL.text = "Mixed"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Property"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecIPropertyType != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecIPropertyType
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Paint",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .nfirsSecIMixedType
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modJ:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecJPropertyUse
                    cell.yesNoB = incidentStructure.incidentNFIRSSecJPropertyUse
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecJPropertyUse
                    cell.subjectL.text = "Property use"
                    cell.leftL.text = "None"
                    cell.rightL.text = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Structures"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecJPUStructure != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecJPUStructure
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "331 Hospital",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidenttype = .nfirsSecJPUStructure
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Outside"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecJPUOutside != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecJPUOutside
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "807 Outdoor storage area",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidenttype = .nfirsSecJPUOutside
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecJPULookup
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecJPULookup {
                        cell.onOffL.text = "YES"
                    } else {
                        cell.onOffL.text = "NONE"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecJPULookUp
                    cell.instructionL.text = "Look up and enter property use code and description only if you have not checked a property use above"
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Property use lookup"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecJPULookupType != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecJPULookupType
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "807 Outdoor storage area",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modK1:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Person/Entity Involved (Local Option)"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecKSameAddress
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecKSameAddress {
                        cell.onOffL.text = "Same"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecKSameAddress
                    cell.instructionL.text = "Check this box if same address as incident location (Section B). Then skip the three duplicate lines."
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Business name"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKBusinessName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKBusinessName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Sports Shack",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Phone"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKPhoneNumber != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKPhoneNumber
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "760-321-0001",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "SegmentCell", for: indexPath) as! SegmentCell
                    cell.delegate = self
                    cell.subjectL.text = "Prefix"
                    cell.myShift = .incidents
                    cell.typeSegment.setTitle("Mr.", forSegmentAt: 0)
                    cell.typeSegment.setTitle("Ms.", forSegmentAt: 1)
                    cell.typeSegment.setTitle("Mrs.", forSegmentAt: 2)
                    switch nfirsSecKNamePrefix {
                    case .mr?:
                        cell.typeSegment.selectedSegmentIndex = 0
                    case .ms?:
                        cell.typeSegment.selectedSegmentIndex = 1
                    case .mrs?:
                        cell.typeSegment.selectedSegmentIndex = 2
                    default:
                        cell.typeSegment.selectedSegmentIndex = 0
                    }
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "First"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKFirstName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKFirstName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "John",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "MI"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKMiddle != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKMiddle
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "D",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Last"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKLastName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKLastName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Mills",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Suffix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKNameSuffix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKNameSuffix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Jr.",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Number/MilePost"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKNumbMilePost != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKNumbMilePost
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "181",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 10:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecKStreetPrefixB
                    cell.subjectL.text = "Street Prefix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKStreetPrefix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKStreetPrefix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecKStreetPrefix
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 11:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Street or Highway"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKStreetName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKStreetName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Main",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 12:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecKStreetSuffixB
                    cell.subjectL.text = "Street Suffix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKStreetSuffix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKStreetSuffix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecKStreetSuffix
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 13:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecK2POBoxB
                    cell.subjectL.text = "Post Office Box"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2POBox != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2POBox
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "101",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecKPOBox
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 14:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecKAptRoomB
                    cell.subjectL.text = "Apt/Suite/Room"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKAptRoom != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKAptRoom
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecKAptSuite
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 15:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "City"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKCity != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKCity
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Santa Monica",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 16:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "State"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKState != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKState
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "CA",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 17:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Zip Code"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecKZip != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecKZip
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "90403",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 18:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecKMorePeopleB
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecKMorePeopleB {
                        cell.onOffL.text = "More"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecKMorePeople
                    cell.instructionL.text = "More people involved? Check this as yes and attach supplemental forms (NFIRS-15) as necessary."
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 19:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelCell", for: indexPath) as! LabelCell
                    cell.modalTitleL.text = "Owner"
                    cell.modalTitleL.font = UIFont.systemFont(ofSize: 28.0, weight: .medium)
                    cell.modalTitleL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 20:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecKSamePersonB
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecKSamePersonB {
                        cell.onOffL.text = "Same"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecKSamePerson
                    cell.instructionL.text = "Same as person involved? Then mark this as yes and skip the rest of this block."
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 21:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecKSameAddress
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecKSameAddress {
                        cell.onOffL.text = "Same"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecKSameAddress
                    cell.instructionL.text = "Mark as yes if same address as incident location (Section B). Then skip the three duplicate address lines."
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 22:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Business name"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2BusinessName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2BusinessName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Sports Shack",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 23:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Phone"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2PhoneNumber != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2PhoneNumber
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "760-321-0001",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 24:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "SegmentCell", for: indexPath) as! SegmentCell
                    cell.delegate = self
                    cell.subjectL.text = "Prefix"
                    cell.myShift = .incidents
                    cell.typeSegment.setTitle("Mr.", forSegmentAt: 0)
                    cell.typeSegment.setTitle("Ms.", forSegmentAt: 1)
                    cell.typeSegment.setTitle("Mrs.", forSegmentAt: 2)
                    switch nfirsSecKNamePrefix2 {
                    case .mr?:
                        cell.typeSegment.selectedSegmentIndex = 0
                    case .ms?:
                        cell.typeSegment.selectedSegmentIndex = 1
                    case .mrs?:
                        cell.typeSegment.selectedSegmentIndex = 2
                    default:
                        cell.typeSegment.selectedSegmentIndex = 0
                    }
                    return cell
                case 25:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "First"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2FirstName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2FirstName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "John",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 26:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "MI"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2Middle != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2Middle
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "D",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 27:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Last"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRASecK2LastName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRASecK2LastName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Mills",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 28:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Suffix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2NameSuffix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2NameSuffix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Jr.",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 29:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Number/MilePost"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2NumbMilePost != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2NumbMilePost
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "181",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 30:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecK2StreetPrefixB
                    cell.subjectL.text = "Prefix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2StreetPrefix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2StreetPrefix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecKStreetPrefix2
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 31:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Street or Highway"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2StreetName != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2StreetName
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Main",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 32:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecK2StreetSuffixB
                    cell.subjectL.text = "Suffix"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2StreetSuffix != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2StreetSuffix
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecK2StreetSuffix
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    return cell
                case 33:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecK2POBoxB
                    cell.subjectL.text = "Post Office Box"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2POBox != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2POBox
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "101",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecK2POBox
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.directionalB.setImage(image, for: .normal)
                    cell.directionalB.alpha = 0.0
                    cell.directionalB.isHidden = true
                    return cell
                case 34:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentTFwDirectionalSwitchCell", for: indexPath) as! IncidentTFwDirectionalSwitchCell
                    cell.delegate = self
                    cell.defaultOvertimeSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.defaultOvertimeSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.defaultOvertimeSwitch.layer.cornerRadius = 16
                    cell.defaultOvertimeSwitch.isOn = incidentStructure.incidentNFIRSSecK2AptRoomB
                    cell.subjectL.text = "Apt/Suite/Room"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2AptRoom != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2AptRoom
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "North",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    cell.incidentType = .nfirsSecK2AptSuite
                    cell.myShift = myShift
                    cell.defaultOvertimeL.text = "NA"
                    cell.directionalB.alpha = 0.0
                    cell.directionalB.isHidden = true
                    return cell
                case 35:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "City"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2City != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2City
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Santa Monica",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 36:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "State"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2State != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2State
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "CA",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 37:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Zip Code"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecK2Zip != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecK2Zip
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "90403",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modL:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "IncidentNotesTextViewCell", for: indexPath) as! IncidentNotesTextViewCell
                    cell.subjectL.text = "Remarks"
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecLRemarks
                    incidentNotesYesNo = true
                    cell.descriptionTV.text = incidentStructure.incidentNFIRSSecLRemarks
                    cell.descriptionTV.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecLRemarksMoreB
                    cell.onOffL.text = ""
                    if incidentStructure.incidentNFIRSSecLRemarksMoreB {
                        cell.onOffL.text = "More"
                    } else {
                        cell.onOffL.text = "No"
                    }
                    cell.onOffL.setNeedsDisplay()
                    cell.type = .nfirsSecLRemarksB
                    cell.instructionL.text = "More remarks? Mark this as yes and attach supplimental forms (NFRIRS-18) as necessary."
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modM:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Officer In Charge ID"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMOfficerInChargeID != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMOfficerInChargeID
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Capt. J Mills",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSSignatureCell", for: indexPath) as! NFIRSSignatureCell
                    cell.delegate = self
                    cell.signatureL.text = "Officer's Signature"
                    cell.type = .nfirsSecMOfficerSignature
                    if incidentStructure.incidentNFIRSSecMOfficiersSignatureB {
                        cell.signatureB.isHidden = true
                        cell.signatureB.alpha = 0.0
                        if incidentStructure.incidentNFIRSSecMOfficiersSignature != nil {
                            let image = UIImage(data:incidentStructure.incidentNFIRSSecMOfficiersSignature!,scale:1.0)
                            cell.signatureIV.image = image
                        }
                    } else {
                        cell.signatureB.isHidden = false
                        cell.signatureB.alpha = 1.0
                    }
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Position or Rank"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMOfficersRank != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMOfficersRank
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Captain 1",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .officersRank
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSLabelTimeButtonCell", for: indexPath) as! NFIRSLabelTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsSecMOfficersDate
                    cell.dateTimeTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMOfficiersSignatureDateS != "" {
                        cell.dateTimeTF.text = incidentStructure.incidentNFIRSSecMOfficiersSignatureDateS
                    } else {
                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.nfirsSecMOfficersDate,date: Date())
                        cell.dateTimeTF.text = dateS
                    }
                    cell.dateTimeL.text = "Date"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    cell.delegate2 = self
                    cell.incidentType = .nfirsSecMOfficersDate
                    if(showPickerSecMOfficer) {
                        let frame = CGRect(
                            origin: CGPoint(x: 0, y: 0),
                            size: CGSize(width: tableView.frame.size.width, height: 216)
                        )
                        cell.dateHolderV.frame = frame
                    } else {
                        let frame = CGRect(
                            origin: CGPoint(x: 0, y: 0),
                            size: CGSize(width: tableView.frame.size.width, height: 0)
                        )
                        cell.dateHolderV.frame = frame
                    }
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Assignment"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMOfficersAssignment != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMOfficersAssignment
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Chief Officer",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .officersAssignment
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelInstructionWSwitchCell", for: indexPath) as! LabelInstructionWSwitchCell
                    cell.delegate = self
                    cell.switchOnOff = incidentStructure.incidentNFIRSSecMOfficerMakingReportB
                    if incidentStructure.incidentNFIRSSecMOfficerMakingReportB {
                        cell.onOffL.text = "YES"
                    } else {
                        cell.onOffL.text = "NO"
                    }
                    cell.type = .nfirsSecMSameAsOfficer
                    cell.instructionL.text = "Switch to yes if same as officer in charge"
                    cell.onOffSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.onOffSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.onOffSwitch.layer.cornerRadius = 16
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldCell", for: indexPath) as! LabelTextFieldCell
                    cell.delegate = self
                    cell.myShift = myShift
                    cell.subjectL.text = "Member Making Report ID"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMOfficerInChargeID != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMOfficerInChargeID
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "FF P Williams",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.45)])
                    }
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSSignatureCell", for: indexPath) as! NFIRSSignatureCell
                    cell.delegate = self
                    cell.signatureL.text = "Members's Signature"
                    cell.type = .nfirsSecMMembersSignature
                    if incidentStructure.incidentNFIRSSecMMembersSignatureB {
                        cell.signatureB.isHidden = true
                        cell.signatureB.alpha = 0.0
                        if incidentStructure.incidentNFIRSSecMMembersSignature != nil {
                            let image = UIImage(data:incidentStructure.incidentNFIRSSecMMembersSignature!,scale:1.0)
                            cell.signatureIV.image = image
                        }
                    } else {
                        cell.signatureB.isHidden = false
                        cell.signatureB.alpha = 1.0
                    }
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Position or Rank"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMMembersRank != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMMembersRank
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Lieutenant",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .membersRank
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                case 10:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "NFIRSLabelTimeButtonCell", for: indexPath) as! NFIRSLabelTimeButtonCell
                    cell.delegate = self
                    cell.type = .nfirsSecMMembersDate
                    cell.dateTimeTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMMembersSignatureDateS != "" {
                        cell.dateTimeTF.text = incidentStructure.incidentNFIRSSecMMembersSignatureDateS
                    } else {
                        let dateS = incidentStructure.incidentDateTime(type:IncidentTypes.nfirsSecMMembersDate,date: Date())
                        cell.dateTimeTF.text = dateS
                    }
                    cell.dateTimeL.text = "Date"
                    let image = UIImage(named: "ICONS_TimePiece red")
                    cell.dateTimeB.setImage(image, for: .normal)
                    return cell
                case 11:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "DatePickerCell", for: indexPath) as! DatePickerCell
                    cell.delegate2 = self
                    cell.incidentType = .nfirsSecMMembersDate
                    if(showPickerSecMMember) {
                        let frame = CGRect(
                            origin: CGPoint(x: 0, y: 0),
                            size: CGSize(width: tableView.frame.size.width, height: 216)
                        )
                        cell.dateHolderV.frame = frame
                    } else {
                        let frame = CGRect(
                            origin: CGPoint(x: 0, y: 0),
                            size: CGSize(width: tableView.frame.size.width, height: 0)
                        )
                        cell.dateHolderV.frame = frame
                    }
                    return cell
                case 12:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelTextFieldWithDirectionCell", for: indexPath) as! LabelTextFieldWithDirectionCell
                    cell.delegate = self
                    cell.subjectL.text = "Assignment"
                    cell.descriptionTF.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1.0)
                    if incidentStructure.incidentNFIRSSecMMembersAssignment != "" {
                        cell.descriptionTF.text = incidentStructure.incidentNFIRSSecMMembersAssignment
                    } else {
                        cell.descriptionTF.attributedPlaceholder = NSAttributedString(string: "Engineer",attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 0.18, green: 0.22, blue: 0.26, alpha: 0.45)])
                    }
                    cell.incidenttype = .membersAssignment
                    cell.myShift = myShift
                    let image = UIImage(named: "ICONS_Directional red")
                    cell.moreB.setImage(image, for: .normal)
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modCompleted:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMFire2B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMFire2B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMFire2
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMFire2S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMStructFire3B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMStructFire3B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMStructFire3
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMStructFire3S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMCivilian4B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMCivilian4B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMCivilian4
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMCivilian4S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMFSCasualty5B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMFSCasualty5B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMFSCasualty5
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMFSCasualty5S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMEMS6B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMEMS6B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMEMS6
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMEMS6S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMHazMat7B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMHazMat7B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMHazMat7
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMHazMat7S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMWild8B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMWild8B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMWild8
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMWild8S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMApp9B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMApp9B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMApp9
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMApp9S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMPersonnel10B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMPersonnel10B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMPersonnel10
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMPersonnel10S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.isOn = incidentStructure.incidentNFIRSSecCMArson11B
                    cell.yesNoB = incidentStructure.incidentNFIRSSecCMArson11B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecCMArson11
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecCMArson11S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        case .modRequired:
            if data.isCollapsed {
                return UITableViewCell()
            } else {
                switch row {
                case 0:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMBuilding111B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMBuilding111B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMBuilding111
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMBuilding111S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 1:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMSpecial112B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMSpecial112B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMSpecial112
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMSpecial112S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 2:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMConfined113B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMConfined113B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMConfined113
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMConfined113S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 3:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMMobile120B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMMobile120B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMMobile120
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMMobile120S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 4:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMVehicle130B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMVehicle130B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMVehicle130
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMVehicle130S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 5:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMVegitation140B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMVegitation140B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMVegitation140
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMVegitation140S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 6:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMOutside150B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMOutside150B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMOutside150
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMOutside150S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 7:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMSOutside160B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMSOutside160B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMSOutside160
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMSOutside160S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 8:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMSOutside161B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMSOutside161B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMSOutside161
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMSOutside161S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                case 9:
                    let cell = tableView.dequeueReusableCell(withIdentifier: "LabelYesNoSwitchCell", for: indexPath) as! LabelYesNoSwitchCell
                    cell.delegate = self
                    cell.yesNotSwitch.onTintColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.yesNotSwitch.backgroundColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 0.35)
                    cell.yesNotSwitch.layer.cornerRadius = 16
                    cell.yesNotSwitch.setOn(incidentStructure.incidentNFIRSSecRMCropFire170B, animated: false)
                    cell.yesNoB = incidentStructure.incidentNFIRSSecRMCropFire170B
                    cell.myShift = myShift
                    cell.incidentType = .nfirsSecRMCropFire170
                    cell.subjectL.text = incidentStructure.incidentNFIRSSecRMCropFire170S
                    cell.leftText = "No"
                    cell.rightText = "Yes"
                    cell.rightL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    cell.leftL.textColor = UIColor(red: 0.82, green: 0.01, blue: 0.11, alpha: 1)
                    return cell
                default:
                    return UITableViewCell()
                }
            }
        default:
            return UITableViewCell()
        }
        //        return UITableViewCell()
    }*/

}